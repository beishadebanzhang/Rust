Struct: 结构体
    自定义的数据类型
    定义:
        struct User {
            username: String,
            email: String,
            sign_in_count: u64,
            active: bool
        }
    实例化:
        // 需要为每个字段指定具体值, 无需按声明顺序指定
        let user = User {
            email: String::from("someone@example.com"),
            username: String::from("someone"),
            active: true,
            sign_in_count: 1
        }
    取值:
        let mut user = ...; // 一旦struct的实例是可变的, 那么实例中所有的字段都是可变的
        user.email = String::from("anothermail@example.com");
    作为返回值:
        fn build_user(email: String, username:String) -> User {
            User {
                email: email, --> email, // 字段名与字段值对应变量名相同时可简写
                username: username,
                active: true,
                sign_in_count: 1
            }
        }
    更新值:
        let user2 = User {
            email: String::from("someone@example.com"),
            username: String::from("someone"),
            active: true,
            sign_in_count: 1,
        }
        let user2 = User {
            email: String::from("someone2@example.com"),
            username: String::from("someone2"),
            ..user1, // 使用和user1相同的值
        }
    Tuple Struct:
        struct Color(i32, i32, i32);
        struct Point(i32, i32, i32);
        let black = Color(0, 0, 0);
        let origin = Point(0, 0, 0); --> black和origin类型不同
    Unit-Like Struct:
        可以定义没有任何字段的struct, 叫做Unit-Like struct(因为与(), 单元类型类似)
        适用于需要在某个类型上实现某个trait, 但里面又没有想要存储的数据
    数据的所有权:
        struct内属性使用String而不是&str
            --> 该实例拥有其所有的数据
            --> 只要struct实例是有效的, 那么里面的字段数据也是有效的
        struct里也可以存放引用, 但这需要生命周期
            --> 生命周期保证只要struct实例是有效的, 那么里面的引用也是有效的
            --> 如果struct里面存储引用, 而不使用生命周期, 就会报错
    方法:
        定义:
            在impl块中定义 --> 每个struct允许拥有多个impl块 --> 一般不推荐
            方法的第一个参数可以是&self, 也可以获得其所有权或可变借用
        调用:
            rust会自动引用或解引用 --> 在调用方法时就会发生这种行为
            在调用方法时, Rust根据情况自动添加&、&mut或*, 以便object可以匹配方法的签名
            例: p1.distance(&p2); 等价于 (&p1).distance(&p2);
    关联函数:
        可以在impl块里定义不把self作为第一个参数的函数, 称之为关联函数, 如: String::form()
        关联函数通常用于构造器
        调用方式: 结构体名::方法名 --> String::form()