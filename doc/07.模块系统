模块系统:
    包(Packages): Cargo 的一个功能，它允许你构建、测试和分享 crate
    Crates: 一个模块的树形结构，它形成了库或二进制项目
    模块(Modules)和 use: 允许你控制作用域和路径的私有性
    路径(path): 一个命名例如结构体、函数或模块等项的方式
包和Carte:
    carte类型: binary、library
    carte root: 源代码文件, rust编译器从这里开始, 组成你的carte的根module
    package组成:
        一个cargo.toml, 描述了如何构建这些cartes
        只能包含0-1个library crate
        可以包含任意数量的binary crate --> 文件放在src/bin, 每个文件都是单独的binary crate
        至少包含一个crate(library或binary)
    crate:
        src/main.rs
            binary crate 的 crate root
            crate名与package名相同
        src/lib.rs
            package包含一个library crate
            library crate的crate root
            crate名和package名相同
        cargo把carte root文件交给rustc来构建binary、library
        作用:
            将相同功能组合到一个作用域内, 便于在项目间进行共享 --> 防止冲突
module:
    在一个crate内, 将代码进行分组; 增加可读性, 易于复用; 控制项目的私有性
    语法:
        mod parent_mod {
            mod child_mod_1 {}
            mod child_mod_2 {}
        }
    main.rs、lib.rs称为crate roots, 其内容生成名为crate的模块, 位于整个模块树的根部
        --> 整个模块在隐式的crate模块下
path:
    为了在rust模块中找到某个条目, 需要使用路径, 路径标识符之间使用::
    绝对路径:
        从crate root开始, 使用crate名或字面值crate
            --> crate::parent_mod::child_mod_1
    相对路径:
        从当前模块开始, 使用self, super或当前模块的标识符
            --> parent_mod::child_mod_1
私有边界:
    rust中所有条目默认是私有的
    父模块无法访问子模块中的私有条目
    子模块可以使用所有祖先模块中的条目
    关键字:
        pub
            --> 标记为公有
                --> pub fn method1 ...
                --> pub struct --> struct公有, 内部字段默认私有 --> 字段需要单独设置pub
                --> pub enum --> struct公有, 内部默认公有
        super --> 访问上级模块内容 --> super::...
        use
            --> 可将路径导入到作用域
                --> user crate::parent_mod::child_mod_1
                --> 使用函数use到父级模块, 使用struct/enum等对象一般指定到其本身, 同名的指定到父级
                --> as 指定路径别名 user crate::parent_mod::child_mod_1 as child
                --> pub use: use导入的路径私有, 无法被外部模块使用, 使用pub开放
            --> 使用外部包
                --> toml中配置dept
                --> 导入多个路径中条目
                        use parent_mod::{child_mod_1, child_mod_2::item2}
                        use parent_mod::{self, child_mod_1}
                        use parent_mod::*
模块内容移动到其他文件:
    mod parent_mod; --> mod后面为;时会从模块同名的文件中加载内容, 模块树的结构不会发生变化
