所有权:
    rust最独特的特性, 使rust无需gc就可以保证内存安全
    内存通过一个所有权系统来管理, 其中包含一组编译器在编译时检查的规则
    当程序运行时, 所有权特性不会减慢程序的运行速度
堆栈:
    stack按值的接收顺序来存储, 按相反的顺序将他们移除
        --> 添加数据叫压入栈, 移除数据叫弹出栈
    所有存储在stack上的数据必须拥有已知的固定大小
        --> 编译时大小未知的数据或运行时大小可能发生变化的数据必须存放在heap上
    Heap内存组织性差一点, 把数据压到stack上要比在heap上分配快得多
        --> stack上不需要寻找可用的存储空间, 位置永远位于stack顶端
    访问heap中数据比stack中慢, 因为需要通过指针才能找到heap中数据
    函数调用:
        当你的代码调用函数时, 值被传入函数中(也包括指向heap的指针)
        函数本地的变量会被压到stack上, 函数结束后值会从stack中弹出
所有权存在的原因:
    解决的问题:
        追踪代码的哪些部分正在使用heap的哪些数据
        最小化heap上的重复数据
        清理heap上未使用的数据以避免空间不足
    管理heap数据是所有权存在的原因
所有权规则:
    每个值都有一个变量, 这个变量是该值的所有者
    每个值同时只能有一个变量
    当所有者超出作用域(scope)时, 该值将被删除
    变量作用域:
        scope就是程序中一个项目的有效范围
String类型:
    字符串字面值
        程序里手写的那些字符串值, 他们是不可变的
        在编译时就知道内容, 其文本内容直接被硬编码到最终的可执行文件中
    String类型:
        在heap上分配, 能够存储在编译时未知数量的文本, 值可以被修改
        let s/let mut s = String::from("hello");
        s.push_str(", World");
内存和分配:
    对于某个值来说, 当拥有它的变量走出作用范围时, 内存会立即自动的交还给操作系统 --> drop函数
变量与数据的交互方式: 移动(Move)
    多个变量可以与同一个数据使用一种独特的方式来交互
    let x = 5; let y = x;
        --> 整数是已知大小的固定值, 这两个5被压入了stack中
    let s1 = String::from("hello"); let s2 = s1;
        --> String由指向heap的指针、len、capacity组成, 存放在stack中
        --> 字符串内容存放在heap中
        --> s1赋值给s2, 复制了stack中数据入栈
        --> 变量离开作用域时调用drop函数, s1在赋值给s2时已经失效, 使用会报错, s1离开作用域不需要释放内存
            --> 深拷贝, 复制heap中数据, 称为move, let s2 = sl.clone(); 不会使s1失效
stack上的数据: 复制
    copy trait, 可用于整数这样完全存放在stack上面的类型
    如果一个类型实现了copy trait, 那么旧的变量值在赋值后仍然可用
    如果一个类型或者该类型的一部分实现了drop trait, 那么rust不允许它再去实现copy trait了
一些拥有copy trait的类型:
    任何简单标量打的组合类型都是可以copy的
    任何需要分配内存或某种资源的都不是copy的
所有权与函数:
    将值传递给函数和值赋值给变量是类似的, 将发生参数变量的移动或复制
返回值与作用域:
    函数在返回值的过程中同样也会发生所有权的转移
    如何让函数使用某个值, 而不获得其所有权 --> 引用
引用与借用:
    &表示引用, 允许你使用某些值而不获得其所有权, 实际是 s --> s1 --> heap中数据
    将引入作为函数参数的行为, 称之为借用 --> 引用默认不可变, 使用 s: &mut String声明可变
    可变引用:
        在特定作用域内, 对某一块数据, 只能有一个可变引用
            --> let mut s = String::from("hello");
                let s1 = &mut s;
                let s2 = &mut s; // 报错
            --> 为了避免数据竞争
                --> 多个指针同时访问一个数据
                --> 至少有一个指针用于写入数据
                --> 没有使用任何机制同步对数据的访问
            --> 可以通过创建新的作用域, 来允许非同时的创建多个可变引用
                let mut s = String::from("hello");
                {let s1 = &mut s;} // 语句执行结束s1失效
                let s2 = &mut s;
        不可以同时拥有一个可变引用和一个不变的引用, 多个不变的引用是可以的
    悬空引用:
        一个指针引用了内存中某个地址, 而这块内存已经被释放并分配给其他人使用
        rust中编译器可保证引用永远不会是悬空引用
            --> 如果你引用了某些数据, 编译器会保证在引用离开作用域之前数据不会离开作用域
                --> 函数中可返回局部变量s1, 但return &s1会报错
    引用的规则:
        在任意给定的时刻, 只能满足下列条件之一
            一个可变的引用
            任意数量的不可变引用
        引用必须一直有效
切片(slice):
    rust的另一种不持有所有权的数据类型
    字符串切片: 指向字符串中一部分内容的引用
        let s = String::from("Hello World");
        let hello = &s[0..5]; --> let hello = &s[..5];
        let world = &s[6..11]; --> let world = &s[6..];
    字符串字面值是切片:
        let s = "Hello World";
            --> 字符串字面值直接存储在二进制程序中
            --> 变量s的类型为&str, 是一个指向二进制程序特定位置的切片
                --> &str是不可变引用, 所以字符串字面值也是不可变的
    字符串切片作为参数传递:
        fn first_word(s:&String)-> &str --> fn first_word(s:&str)-> &str
        使用&str作为参数类型, 可同时接收String和&str类型的参数
        let s1 = String::from("hello"); --> first_word(&s1[..])
        let s2 = "hello"; --> first_word(s2)