main.rs:
    use std::{env, process};
    use test_01::{Config, run};

    fn main() {

        let args: Vec<String> = env::args().collect();

        let config = Config::new(&args).unwrap_or_else(|err| {
            eprintln!("Problem parsing arguments: {}", err);
            process::exit(1);
        });

        if let Err(e) = run(config) {
            eprintln!("Application error: {}", e);
            process::exit(1);
        };
    }
lib.rs:
    use std::error::Error;
    use std::{env, fs};

    pub struct Config {
        pub query: String,
        pub file_name: String,
        pub case_sensitive: bool,
    }

    impl Config {
        pub fn new(args: &[String]) -> Result<Config, &'static str> {
            if args.len() < 3 {
                return Err("not enough argument");
            }
            let query = args[1].clone();
            let file_name = args[2].clone();
            let case_sensitive = env::var("CASE_INSENSITIVE").is_err();
            return Ok(Config {query, file_name, case_sensitive});
        }
    }

    pub fn run(config: Config) -> Result<(), Box<dyn Error>> {
        let contents = fs::read_to_string(config.file_name)?;

        let results = if config.case_sensitive {
            search(&config.query, &contents)
        } else {
            search_case_insensitive(&config.query, &contents)
        };
        for line in results {
            println!("{}", line);
        }
        return Ok(());
    }

    pub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {
        let mut results: Vec<&str> = Vec::new();
        for line in contents.lines() {
            if line.contains(query) {
                results.push(line);
            }
        }
        return results;
    }

    pub fn search_case_insensitive<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {
        let mut results: Vec<&str> = Vec::new();
        let query = query.to_lowercase();
        for line in contents.lines() {
            if line.to_lowercase().contains(&query) {
                results.push(line);
            }
        }
        return results;
    }

    #[cfg(test)]
    mod tests {
        use super::*;

        #[test]
        fn one_result() {
            let query = "duct";
            let contents = "\
    Rust:
    safe, fast, productive.
    Pick three.";
            assert_eq!(vec!["safe, fast, productive."], search(query, contents));
        }

        #[test]
        fn case_insensitive() {
            let query = "rUsT";
            let contents = "\
    Rust:
    safe, fast, productive.
    Pick three.
    Trust me.";

            assert_eq!(
                vec!["Rust:", "Trust me."],
                search_case_insensitive(query, contents)
            );
        }

    }
修改输出:
    cargo run > output.txt
        --> 不会修改 eprintln! 标准错误, 只修改标准输出