Rust的错误处理:
    可恢复错误: Result<T, E>
    不可恢复错误: panic!宏
panic:
    当panic!宏执行时
        --> 程序会打印一个错误信息
        --> 展开(unwind)、清理调用栈(stack)
        --> 退出程序
    panic发生时
        程序展开调用栈(工作量大) --> rust沿着调用栈往回走 --> 清理每个遇到的函数中的数据
        立即终止调用栈 --> 不进行清理, 直接停止程序 --> 内存需要OS进行清理 --> 可使二进制文件更小
        设置: toml文件中, [profile.release] panic='abort'
    回溯信息:
        set RUST_BACKTRACE=1 && cargo run
            --> 为了获取带有调试信息的回溯, 必须启用调试符号(cargo run不带--release)
Result:
    enum Result<T, E> {
        OK(T), // 操作成功时, ok变体里返回数据的类型
        Err(E), // 操作失败时, err变体返回错误的类型
    }
    处理result:
        match:
            let f = File::open("hello.txt");
            let f = match f {
                Ok(file) => file,
                Err(error) => match error.kind() {
                    ErrorKind::NotFound => match File::create("hello.txt") {
                        Ok(fc) => fc,
                        Err(e) => panic!("Error creating file: {:?}", e),
                    },
                    other_error => panic!("Error opening the file: {:?}", other_error),
                }
            };
        closure: 闭包
            // unwrap match表达式的一个快捷方法, Result结果为OK返回OK里面的值, Err则调用panic!宏
            let f = File::open("hello.txt").unwrap();
            // unwrap_or_else --> 没有error则解包提取内容
            let f = File::open("hello.txt").unwrap_or_else(|error| {
                if error.kind() == ErrorKind::NotFound {
                    return File::create("hello.txt").unwrap_or_else(|error| {
                        panic!("Error creating file: {:?}", error);
                    });
                } else {
                    panic!("Error opening the file: {:?}", error);
                }
            });
        except: 和unwrap类似, 但可以指定错误信息
            let f = File::open("hello.txt").expect("无法打开文件");
    传播错误:
        fn read_username_from_file() -> Result<String, io::Error> {
            let f = File::open("hello.txt");
            let mut f = match f {
                Ok(file) => file,
                Err(e) => return Err(e),
            };
            let mut s= String::new();
            match f.read_to_string(&mut s) {
                Ok(_) => Ok(s),
                Err(e) => Err(e),
            }
        }
        ? 运算符: 传播错误的一种快捷方式, err抛出, 否则返回ok(s)中内容
            fn read_username_from_file() -> Result<String, io::Error> {
                let mut f = File::open("hello.txt")?;
                let mut s= String::new();
                f.read_to_string(&mut s)?;
                return Ok(s)
            }
            from函数:
                Trait std::convert::From的from函数用于错误之间的转换
                被?所应用的错误, 会隐式的被from函数处理
                from函数会把接收的错误类型转换为当前函数返回类型所定义的错误类型
                    --> 针对不同错误原因返回同一错误类型
                        --> 只要每个错误类型实现了转换为所返回的错误类型的from函数
                let mut s = String::new();
                File::open("hello.txt")?.read_to_string(&mut s)?;
                return Ok(s);
            ? 只能用于返回Result的函数
            main函数的返回类型也可以是Result<T, E>
                fn main() -> Result<(), Box<dyn Error>>{ // Box<dyn Error>是trait对象, 即任何可能的错误类型
                    let f = File::open("hello.txt")?;
                    return Ok(());
                }