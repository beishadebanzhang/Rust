枚举:
    定义:
        enum IpAddrKind {
            V4,
            V6,
        }
    取值:
        let four = IpAddrKind::V4;
    传参:
        fn route(ip_kind: IpAddrKind) {} -->  route(IpAddrKind::V4);
    数据附加:
        enum IpAddrKind { --> rust自带枚举类IpAddr
            V4(u8, u8, u8, u8), --> 可关联任意数据类型, 包括struct
            V6(String),
        }
        let home = IpAddr::V4(127, 0, 0, 1);
        let loopback = IpAddr::V6(String::from("::1"));
    方法:
        impl Message {
            fn call(&self) {
                // 在这里定义方法体
            }
        }
        let m = Message::Write(String::from("hello"));
        m.call();
    Option枚举:
        Rust并没有空值, 不过它确实拥有一个可以编码存在或不存在概念的枚举, 这个枚举是 Option<T>
        enum Option<T> {
            None,
            Some(T),
        }
        let some_number = Some(5);
        let some_char = Some('e');
        let absent_number: Option<i32> = None;
        Option<T> 进行T的运算之前必须将其转换为T, 转换时可捕获空值处理 --> // todo Option值处理
match控制流结构:
    match 需要对枚举的每一种情况做处理 --> 若match没有匹配所有分支, 编译时会报错
    enum Coin {
        Penny,
        Nickel,
        Dime,
        Quarter,
    }
    fn value_in_cents(coin: Coin) -> u8 {
        match coin {
            Coin::Penny => 1, // 每个分支相关联的代码是一个表达式，而表达式的结果值将作为整个 match 表达式的返回值
            Coin::Nickel => {5},
            Coin::Dime => 10,
            Coin::Quarter => 25,
        }
    }
    绑定值的模式:
        匹配分支的另一个有用的功能是可以绑定匹配的模式的部分值 --> 从枚举成员中提取值
        enum Coin {
            Penny,
            Nickel,
            Dime,
            Quarter(UsState),
        }
        fn value_in_cents(coin: Coin) -> u8 {
            match coin {
                Coin::Penny => 1,
                Coin::Nickel => 5,
                Coin::Dime => 10,
                Coin::Quarter(UsState) => {
                    println!("State quarter from {:?}!", UsState);
                    25
                }
            }
        }
    匹配 Option<T>:
        fn plus_one(x: Option<i32>) -> Option<i32> {
            match x {
                None => None,
                Some(i) => Some(i + 1),
            }
        }
        let five = Some(5);
        let six = plus_one(five);
        let none = plus_one(None);
    通配模式和 _ 占位符:
        对一些特定的值采取特殊操作，而对其他的值采取默认操作
        必须将通配分支放在最后，因为模式是按顺序匹配的
        let dice_roll = 9;
        match dice_roll {
            3 => add_fancy_hat(),
            7 => remove_fancy_hat(),
            other => move_player(other),
        }
        _可以匹配任意值而不绑定到该值
        match dice_roll {
            3 => add_fancy_hat(),
            7 => remove_fancy_hat(),
            _ => reroll(),
        }
        使用空元祖表示不做任何处理
        match dice_roll {
            3 => add_fancy_hat(),
            7 => remove_fancy_hat(),
            _ => (),
        }
if let简洁控制流:
    if let处理只匹配一个模式的值而忽略其他模式的情况 --> 更少的代码, 但会失去match强制要求的穷尽性检查
    let config_max = Some(3u8);
    match config_max {
        Some(max) => println!("The maximum is configured to be {}", max),
        _ => (),
    }
    // 与上面match的行为一致
    if let Some(max) = config_max {
        println!("The maximum is configured to be {}", max);
    } else { count += 1; }
